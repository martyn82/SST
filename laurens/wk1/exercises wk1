1.4: 	Changing the condition to k^2 >= n would not make a difference.

if k * k == n than divides k n is true (since k is a natural number) so the program would return in the first guard.

1.6: 	Integer -> Integer -> Integer
because n, d are integers in divides and because the == 0 check, looks for equality to a number. 

1.7: 	Because divides has type: Integer -> Integer -> Bool, which is short for Integer -> (Integer -> Bool), we can understand that the type of "divides 5" is a function that maps Integer to Bool

when we ask for the type of "divides 5 7" we get the result type of the Integer -> Bool, a Bool.

1.18:	1. ["a", "b"]
	2. (True, "a")
	3. [(True, "a"), (False, "b")]
	4. ([False, True], "a")
	5. True &&

1.19:	1. head :: [a] -> a
	2. last :: [a] -> a
	3. init :: [a] -> [a]
	4. fst :: (a, b) -> a
	5. (++) :: [a] -> [a] -> [a]
	6. flip :: (a -> b -> c) -> b -> a -> c
	7. flip (++) :: [a] -> [a] -> [a]

	1. Get first element
	2. Get last element
	3. Get all but last element
	4. Take first from tuple
	5. Concat lists
	6. Changes a function from a to b to c into a function from b to a to c
	7. Concats the list the other way round, not a + b but b + a.

1.24:	ldp becomes a call to ldpf primes1, therefor stating "lpd n" actually is executed as "ldpf primes 1 n"

2.2:	p	(+)	q
	T	F	T
	T	T	F
	F	T	T
	F	F	F

2.4:	Not	(p	==	q)
	F	T	T	T
	T	T	F	F
	T	F	F	T
	F	F	T	F

Truth tables of 2.2 and 2.4 are equal.

2.11:	p	logEquiv	Not Not p
	T	T		T   F   T
	F	T		F   T   F

	p	^	p	logEquiv	p
	T	T	T	T		T
	F	F	F	T		F

	p	v	P	logEquiv	p
	T	T	T	T		T
	F	F	F	T		F

	p	=>	q	logEquiv	Not	p	v	q
	T	T	T	T		F	T	T	T
	T	F	F	T		F	T	F	F
	F	T	T	T		T	F	T	T
	F	T	F	T		T	F	T	F

	..

2.16:	1. The equation has no solution
	2. A largest natural number exists
	3. The number 13 is no prime
	4. The number n is no prime
	5. The are some primes

2.17:	x >= y || y >= z

2.18:	(p <=> q) === (not p <=> not q)
	(p && q) || (not p && not q) === (not p && not q) || (p && q) (Contraposition)
	(p && q) || (not p && not q) === (p && q) || (not p && not q) (Communicativity)

	(not p <=> q) === (p <=> not q)
	(not p => q) && (q => not p) === (p => not q) && (not q => p) (Contraposition)
	(not p => q) && (q => not p) === (q => not p) && (not p => q) (Idempotence 2x)
	(not p => q) && (q => not p) === (not p => q) && (q => not p) (Communicativity)

2.19:	(p <=> q) && (p === q)
        (p <=> q) && True
	 T  T  T  T  T 
	 T  F  F  F  T  <-- False F && T
	 F  F  T  F  T  <-- False F && T
	 F  T  F  T  T   

2.20:	Equivalent -> 3, 4, 6, 7
	Not Equiv. -> 1, 2, 5

2.21:	1. not p ==> not q
	2. p, q give 4 (2 * 2) input combinations. For each input combination we can get the outcome True/False. Therefore we have the following domain of outcomes: [t/f, t/f, t/f, t/f]. All possible options in this domain are: 2*2*2*2 = 16.
	3. We could always just write it out: (p && q) || (not p && q) || ...
	4. As shown in step 3, writing all possible values out. But this is not very readable.
	5. 3-letter formulas have 8 input combinations. So we have 2^8 256 combinations.

2.22:	Between 0/1 and 1/1 we get 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, etc. We believe that there are infinitely many natural numbers and therefor we can continue forever.

2.23:	1.    ( For all x )
		   |
		( ==> )
 	      /       \
	   ( A )     ( ==> )
             |        /    \
            ( x )   ( B ) ( C )
                      |     |
                    ( x ) ( x )

	2.    ( Some x )
		 |
               ( && )
              /      \
            ( A )   ( B )
              |       |
             (x)     (x)

	3.     ( && )
              /      \
         ( Some x ) ( Some x )
            |          |
          ( A )      ( B )
            |          |
           (x)        (x)

2.26:	1. E x in Q  E y in Q ( x < y )
	2. A x in R  E y in R ( x < y )
	3. A x in Z  E m in N  E n in N (x = m - n)

2.27	1. A x ( Q(x) ==> E m n (Z(m) && Z(n) && n /= 0 && x = m/n) )
	2. A x y (F(x) && D(y) && O(x, y) ==> B(x, y))

2.31:	1. E x (x^2 + 1 = 0)
	2. A x in N  E y in N (x < y)
	3. Prime(13) where Prime n = (not (E y in N (y < n && y > 1 && y|x == y)))
	4. Prime(n) 
	5. A x in N  E y in N ( Prime(x) && Prime(y) && x < y)

2.32:	1. A x (L(x, d))
	2. A x (L(d, x))
	3. A x (M(x) => M'(x))
	4. E x (B(x) => Not F(x))

2.33:	1. A x (Dog(x) && Barks(x) => Not Bites(x))
	2. E x(Glitters(x) => Not IsGold(x))
	3. A x (Friend(d, x) => Friend(p, x))
	4. A n (Limit(n) == 0 => (E y (n <y)))

2.34:	1. A x (x == Charles || L(x,Diana)
	2. A m (Man(m) => E x y (Woman(x) && Woman(y) && x /= y && Adores(m,x) && Adores(m,y)))
	3. Not (E m (Man(m) && Married(m) => MarriedTo(m) > 1)

2.35:	1. E x (King(x) && A y (King(y) ==> y == x) && Not Raging(x))
	2. E x (King(x) && A y (King(y) ==> y == x) && A y (S(y, x) ==> L(y, x)))

2.36:	1. x^2 = 5
	2. natural numbers are infinite.
	3. for all natural numbers there is no number larger than 1 and smaller than 2^itself + 1 that divides 2^itself + 1.
	4. for all natural numbers there exists a larger of equal number.

2.37:	a: False -> 1, 3, 4. True -> 2, 5
	b. False -> 1, 2, 3, 4. True -> 5
	c. False -> 1, 3, 4. True -> 2, 5
	d. False -> 1, 3, 4, 5. True -> 2
	e. False -> 1, 2, 3, 4, 5.
	f. False -> 1. Unknown -> 2, 3, 4, 5.

2.38:	1, 5 remain the same.
	2 becomes true
	3, 4 remain unchanged (what was true, stays true).

2.39:	p <=> q && p === q
	Assume p <=> q is not logically valid
	False && p === q
	p === q cannot be the case, because False && x cannot become true.

2.41:	..

2.46:	No: Not (E x in A ( f(x) ))
        E x in A ( Not f(x) ) (Morgan)
	
	is not equal to:
	E x not in A ( f(x) )

2.47:	No: We apply a different domain. Everything could be different.

2.48:	Just apply the text from "Restricted quantifiers explained"

2.50:	isn't the answer given allready? 
